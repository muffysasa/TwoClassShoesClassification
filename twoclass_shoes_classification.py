# -*- coding: utf-8 -*-
"""TwoClass_shoes_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_bJPomTgnHzbqO-VOh2WEx0epQVq_yWh

https://www.kaggle.com/code/jiaowoguanren/nike-adidas-and-converse-shoes-images-tf

this board, build model with 2 class classification of shoes. they are adidas and converse shoes
"""

import os
import zipfile

local_zip = 'train.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')

local_zip = 'test.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

# Directory with our training pictures
train_A = os.path.join('/tmp/train/adidas')
train_C = os.path.join('/tmp/train/converse')

# Directory with our validation pictures
test_A = os.path.join('/tmp/test/adidas')
test_C = os.path.join('/tmp/test/converse')

#show example name files in train files
train_A_names = os.listdir(train_A)
print(train_A_names[:5])
train_C_names = os.listdir(train_C)
print(train_C_names[:5])

#show example name files in test file
test_A_names = os.listdir(test_A)
print(test_A_names[:5])
test_C_names = os.listdir(test_C)
print(test_C_names[:5])

#total file
print('total train Adidas images:', len(os.listdir(train_A)))
print('total train Converse images:', len(os.listdir(train_C)))
print('total test Adidas images:', len(os.listdir(test_A)))
print('total test Converse images:', len(os.listdir(test_C)))



# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 4
ncols = 4

# Index for iterating over images
pic_index = 0

# Set up matplotlib fig, and size it to fit 4x4 pics
fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 4)

pic_index += 8
next_A_pic = [os.path.join(train_A, fname) 
                for fname in train_A_names[pic_index-8:pic_index]]
next_C_pic = [os.path.join(train_C, fname) 
                for fname in train_C_names[pic_index-8:pic_index]]

for i, img_path in enumerate(next_A_pic + next_C_pic):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255
train_datagen = ImageDataGenerator(rescale=1/255)
validation_datagen = ImageDataGenerator(rescale=1/255)

# Flow training images using train_datagen generator
train_generator = train_datagen.flow_from_directory(
        '/tmp/train/',  # This is the source directory for training images
        classes = ['adidas', 'converse'],
        target_size=(240, 240), 
        batch_size=30,
        # Use binary labels
        class_mode='binary')

# Flow validation images using valid_datagen generator
validation_generator = validation_datagen.flow_from_directory(
        '/tmp/test/',  # This is the source directory for training images
        classes = ['adidas', 'converse'],
        target_size=(240, 240),  
        batch_size=5,
        # Use binary labels
        class_mode='binary',
        shuffle=False)

import tensorflow as tf
import numpy as np
from itertools import cycle

from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from scipy import interp
from sklearn.metrics import roc_auc_score

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(240, 240, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.summary()

# Contoh model architecture plot
from tensorflow.keras.utils import plot_model
# summarize model 1
plot_model(model, 'model_1_summary.png', show_shapes=True)

model.compile(optimizer = tf.optimizers.Adam(),
              loss = 'binary_crossentropy', #two class using binary (if multi-class using categorical)
              metrics=['accuracy'])

history = model.fit(train_generator,
      steps_per_epoch=4,  
      epochs=25,
      verbose=1,
      validation_data = validation_generator,
      validation_steps=8)

model.evaluate(validation_generator)

STEP_SIZE_TEST=validation_generator.n//validation_generator.batch_size
validation_generator.reset()
preds = model.predict(validation_generator,
                      verbose=1)

fpr, tpr, _ = roc_curve(validation_generator.classes, preds)

roc_auc = auc(fpr, tpr)

plt.figure()
lw = 2
plt.plot(fpr, tpr, color='darkorange',
         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(240, 240))
  x = image.img_to_array(img)
  plt.imshow(x/255.)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  classes = model.predict(images, batch_size=2)
  print(classes)
  if classes>=0.5:
    print(fn + " Sepatu merek Adidas")
  else:
    print(fn + " Sepatu merek Converse")